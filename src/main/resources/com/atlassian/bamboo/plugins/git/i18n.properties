repository.git.name = Git
repository.git.repositoryUrl = Repository URL
repository.git.repositoryUrl.description = The URL of Git repository.
repository.git.username = Username
repository.git.username.description = Username you want to use to authenticate with http(s) or SSH repository.
repository.git.password = Password
repository.git.password.description = Password you want to use to authenticate with http(s) or SSH repository.
repository.git.branch = Branch
repository.git.branch.description = The name of the branch (or tag) containing source code.
repository.git.ssh.key = SSH Key
repository.git.ssh.key.description = SSH private key you want to use to access the repository.
repository.git.ssh.key.change = Change SSH key?
repository.git.ssh.passphrase = SSH Passphrase
repository.git.ssh.passphrase.description = Passphrase you want to use to access SSH private key.
repository.git.useShallowClones = Use shallow clones
repository.git.useShallowClones.description = Fetches the shallowest commit history possible. Do not use if your build depends on full repository history.  
repository.git.maven.path = Location of POM file
repository.git.maven.path.description = Path to the POM file relative to the root of the Git repository<br />\
  (Default if empty: pom.xml in the root of the repository)

repository.git.authenticationType = Authentication Type
repository.git.authenticationType.none = None
repository.git.authenticationType.password = Username/password
repository.git.authenticationType.ssh_keypair = SSH private key

repository.git.cacheDirectory = Cache directory
repository.git.cacheDirectory.cleanMessage = You can manually clean cache directory for this plan by clicking here:
repository.git.cacheDirectory.cleanTitle = delete this cache directory
repository.git.cacheDirectory.usedBy = This cache is also used by {0} other configurations

repository.git.messages.cache.cleanFailedNoPlan = Failed to clean cache directory for plan ''{0}'': there is no such plan.
repository.git.messages.cache.notGit = Tried to clean Git cache for plan ''{0}'' which is not a Git repository.
repository.git.messages.cache.notExist = Cache directory for plan ''{0}'' does not exist: ''{1}''.
repository.git.messages.cache.cleaning = Cleaning cache directory for plan ''{0}'' : ''{1}''.
repository.git.messages.cache.cleanFailed = Could not delete cache directory for plan ''{0}''.
repository.git.messages.cacheIsNull = Cache directory is null, can't proceed with collecting changesets. Check bamboo logs for details.
repository.git.messages.ccRepositoryNeverChecked = Never checked remote repository, obtaining shallow revision {0}.
repository.git.messages.ccRecover.failedToCollectChangesets = Warning: failed to collect changesets in cache directory ''{0}'', trying to recover...
repository.git.messages.ccRecover.cleanedCacheDirectory = Cleaned cache directory ''{0}'', trying to fetch it again from scratch...
repository.git.messages.ccRecover.fetchedRemoteRepository = Fetched remote repository to cache directory ''{0}'', trying to extract changesets...
repository.git.messages.ccRecover.completed = Extracted changesets, recover successful.
repository.git.messages.ccRecover.failedToExtractChangesets = Failed to extracted changesets, will return a stub changeset.
repository.git.messages.runtimeException = Runtime exception.
repository.git.messages.rsRecover.failedToRetrieveSource = Warning: failed to retrieve source code to directory ''{0}'', trying to recover...
repository.git.messages.rsRecover.cleanedSourceDirectory = Cleaned source directory ''{0}'', trying to fetch and checkout code once again...
repository.git.messages.rsRecover.completed = Checkout completed, recover successful.
repository.git.messages.protocolUnsupported = ''{0}'' is not supported protocol.
repository.git.messages.failedToCreateFileRepository = Failed to create FileRepository.
repository.git.messages.cannotDetermineRevision = Cannot determine current revision in source directory ''{0}'' due to IOException:
repository.git.messages.targetRevisionIsNull = Target revision is null, obtaining the latest one from ''{0}'' on branch ''{1}''.
repository.git.messages.cannotDetermineHead = Cannot determine head revision of ''{0}'' on branch ''{1}''.
repository.git.messages.creatingGitRepository = Creating local git repository in ''{0}''.
repository.git.messages.fetchingBranch = Fetching branch ''{0}''.
repository.git.messages.doingShallowFetch = Will try to do a shallow fetch.
repository.git.messages.fetchingFailed = Cannot fetch ''{0}'', branch ''{1}'' to source directory ''{2}''.
repository.git.messages.checkingOutRevision = Checking out revision {0}.
repository.git.messages.checkoutFailed = Checkout to revision {0} has failed.
repository.git.messages.extractingChangesetsException = Exception during extracting changes in ''{0}'', previousRevision is {1} targetRevision is {2}.
repository.git.messages.invalidURI = ''{0}'' is not valid URI.
repository.git.messages.failedToOpenTransport = Failed to open transport for ''{0}''.
repository.git.messages.unknownChanges = Repository has changed but Bamboo is unable to extract changes between revision {0} and {1}.
repository.git.messages.missingRepositoryUrl = Please specify Repository URL.
repository.git.messages.unsupportedHttpAuthenticationType = Authentication type not supported for http(s) protocol.
repository.git.messages.unsupportedUsernameField = Username field is supported for http(s) and SSH protocol only.
repository.git.messages.duplicateUsernameField = Duplicate username.
repository.git.messages.duplicatePasswordField = Duplicate password.
repository.git.messages.cannotFindPom = Cannot find pom file in the specified location ''{0}''.
repository.git.messages.invalidPomPath = Path to POM file cannot contain ''..'' sequence.

git.fields = Git
git.fields.title = Help on Git configuration options

manageCaches.git.description = Cache directories on Bamboo server used by Git.
manageCaches.delete.git.nothingToDelete = Nothing selected for deletion, skipping.
manageCaches.delete.git.success = Deleted Git cache ''{0}''
manageCaches.delete.git.skipped = Skipping non-existent Git cache ''{0}''
manageCaches.delete.git.failed = Deleting of Git cache ''{0}'' failed: {1}
manageCaches.delete.git.unused.success = Deleted unused Git cache ''{0}''
manageCaches.delete.git.unused.failed = Deleting of unused Git cache ''{0}'' failed: {1}
